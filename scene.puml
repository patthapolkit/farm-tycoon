@startuml
class scene.PlotScene {
- GameInstance gameInstance
- VBox container
- OrbitFontText title
- VBox titleContainer
- StackPane topContainer
- PlotGrid plotGrid
- PlotControl plotControl
- CashDisplay cashDisplay
+ <<Create>> PlotScene(GameInstance)
- void plotSquareEvents()
- Boolean hasEnoughMoney(int)
- void updateCashText(int)
- void loadUnlockedSeed()
- void loadPlots()
- void plotHarvested(Plot)
- void plotWatered(Plot)
- void plotPlanted(Plot,Seed)
}
class scene.FarmScene {
- GameInstance gameInstance
- CashDisplay cashDisplay
- ImageView barn
- ImageView shop
- ImageView mart
- ImageView plot
- ImageView cage
- ImageView factory
+ <<Create>> FarmScene(GameInstance)
+ void updateCashText(int)
- void imageViewSetup()
- void cursorSetup()
- void eventSetup()
- void cashDisplaySetup()
- void relocateImageView()
}
class scene.ShopScene {
- GameInstance gameInstance
- VBox container
- OrbitFontText title
- VBox titleContainer
- VScroll itemSelector
- InfoPane infoPane
- StackPane topContainer
- String selectedItem
- HBox mainContainer
- CashDisplay cashDisplay
+ <<Create>> ShopScene(GameInstance)
- void updateCashText(int)
- void vScrollSetup()
- void vButtonSetup()
- void infoPaneSetup()
- void setSelectedItem(Node)
- void purchase()
}
class scene.CreditScene {
- VBox container
- OrbitFontText title
- VBox titleContainer
- StackPane topContainer
- VBox textContainer
+ <<Create>> CreditScene()
- void textContainerSetup()
}
class scene.HomeMenuScene {
- Stage stage
- {static} Scene scene
- VBox buttonContainer
- LuckyFontText title
- GameButton playButton
- GameButton tutorialButton
- GameButton creditButton
- {static} StackPane root
+ <<Create>> HomeMenuScene(Stage)
- void componentSetup(GameInstance)
- void eventSetup(GameInstance)
- void stageSetup()
+ {static} StackPane getRoot()
+ {static} Scene getScene()
}
class scene.BarnScene {
- StackPane topContainer
- VBox container
- VBox titleContainer
- InventoryGrid inventoryGrid
- OrbitFontText title
- CashDisplay cashDisplay
+ <<Create>> BarnScene(ArrayList<ItemCounter>,int)
}
class scene.FactoryScene {
- GameInstance gameInstance
- VBox container
- OrbitFontText title
- VBox titleContainer
- VScroll recipeSelector
- InfoPane infoPane
- StackPane topContainer
- String selectedRecipe
- HBox mainContainer
- CashDisplay cashDisplay
+ <<Create>> FactoryScene(GameInstance)
- void vScrollSetup()
- void craftPaneSetup()
- void setSelectedRecipe(Node)
- void craftPressed()
- void containerSetup()
}
class scene.MinimartScene {
- GameInstance gameInstance
- VBox container
- OrbitFontText title
- VBox titleContainer
- VScroll itemSelector
- InfoPane infoPane
- StackPane topContainer
- String selectedItem
- HBox mainContainer
- CashDisplay cashDisplay
+ <<Create>> MinimartScene(GameInstance)
- void updateCashText(int)
- void vScrollSetup()
- void vButtonSetup()
- void infoPaneSetup()
- void setSelectedItem(Node)
- void sell()
}
class scene.CageScene {
- GameInstance gameInstance
- VBox container
- OrbitFontText title
- VBox titleContainer
- StackPane topContainer
- AnimalGrid animalGrid
- AnimalControl animalControl
- CashDisplay cashDisplay
+ <<Create>> CageScene(GameInstance)
- void animalSquareEvents()
- void animalSquareHarvest(AnimalSquare)
- Boolean haveWheat()
- void loadAnimal()
- void animalCollected(Animal)
- void animalFed(Animal)
}


scene.StackPane <|-- scene.PlotScene
scene.Pane <|-- scene.FarmScene
scene.StackPane <|-- scene.ShopScene
scene.StackPane <|-- scene.CreditScene
scene.StackPane <|-- scene.BarnScene
scene.StackPane <|-- scene.FactoryScene
scene.StackPane <|-- scene.MinimartScene
scene.StackPane <|-- scene.CageScene
@enduml